{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages semver","title":"semver"},{"location":"semver--index/","text":"Semver package \u00b6 A semantic versioning library and constraints solver for Ponylang heavily inspired by blang/semver .","title":"Package"},{"location":"semver--index/#semver-package","text":"A semantic versioning library and constraints solver for Ponylang heavily inspired by blang/semver .","title":"Semver package"},{"location":"semver-range--index/","text":"No package doc string provided for semver/range. Public Types \u00b6 primitive RangeBoundsAreEqual type RangeBound class Range","title":"Semver range  index"},{"location":"semver-range--index/#public-types","text":"primitive RangeBoundsAreEqual type RangeBound class Range","title":"Public Types"},{"location":"semver-range-Range/","text":"Range \u00b6 [Source] class ref Range is Equatable[Range ref] ref, Stringable box Implements \u00b6 Equatable [ Range ref] ref Stringable box Constructors \u00b6 create \u00b6 [Source] new ref create( from': (Version box | None box), to': (Version box | None box), from_inc': Bool val = true, to_inc': Bool val = true) : Range ref^ Parameters \u00b6 from': ( Version box | None box) to': ( Version box | None box) from_inc': Bool val = true to_inc': Bool val = true Returns \u00b6 Range ref^ Public fields \u00b6 let from: ( Version box | None box) \u00b6 [Source] let to: ( Version box | None box) \u00b6 [Source] let from_inc: Bool val \u00b6 [Source] let to_inc: Bool val \u00b6 [Source] Public Functions \u00b6 contains \u00b6 [Source] fun box contains( v: Version ref) : Bool val Parameters \u00b6 v: Version ref Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Range box) : Bool val Parameters \u00b6 that: Range box Returns \u00b6 Bool val merge \u00b6 [Source] fun box merge( that: Range ref) : Range ref Parameters \u00b6 that: Range ref Returns \u00b6 Range ref overlaps \u00b6 [Source] fun box overlaps( that: Range ref) : Bool val Parameters \u00b6 that: Range ref Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ ne \u00b6 [Source] fun box ne( that: Range box) : Bool val Parameters \u00b6 that: Range box Returns \u00b6 Bool val","title":"Range"},{"location":"semver-range-Range/#range","text":"[Source] class ref Range is Equatable[Range ref] ref, Stringable box","title":"Range"},{"location":"semver-range-Range/#implements","text":"Equatable [ Range ref] ref Stringable box","title":"Implements"},{"location":"semver-range-Range/#constructors","text":"","title":"Constructors"},{"location":"semver-range-Range/#create","text":"[Source] new ref create( from': (Version box | None box), to': (Version box | None box), from_inc': Bool val = true, to_inc': Bool val = true) : Range ref^","title":"create"},{"location":"semver-range-Range/#parameters","text":"from': ( Version box | None box) to': ( Version box | None box) from_inc': Bool val = true to_inc': Bool val = true","title":"Parameters"},{"location":"semver-range-Range/#returns","text":"Range ref^","title":"Returns"},{"location":"semver-range-Range/#public-fields","text":"","title":"Public fields"},{"location":"semver-range-Range/#let-from-version-box-none-box","text":"[Source]","title":"let from: (Version box | None box)"},{"location":"semver-range-Range/#let-to-version-box-none-box","text":"[Source]","title":"let to: (Version box | None box)"},{"location":"semver-range-Range/#let-from_inc-bool-val","text":"[Source]","title":"let from_inc: Bool val"},{"location":"semver-range-Range/#let-to_inc-bool-val","text":"[Source]","title":"let to_inc: Bool val"},{"location":"semver-range-Range/#public-functions","text":"","title":"Public Functions"},{"location":"semver-range-Range/#contains","text":"[Source] fun box contains( v: Version ref) : Bool val","title":"contains"},{"location":"semver-range-Range/#parameters_1","text":"v: Version ref","title":"Parameters"},{"location":"semver-range-Range/#returns_1","text":"Bool val","title":"Returns"},{"location":"semver-range-Range/#eq","text":"[Source] fun box eq( that: Range box) : Bool val","title":"eq"},{"location":"semver-range-Range/#parameters_2","text":"that: Range box","title":"Parameters"},{"location":"semver-range-Range/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-range-Range/#merge","text":"[Source] fun box merge( that: Range ref) : Range ref","title":"merge"},{"location":"semver-range-Range/#parameters_3","text":"that: Range ref","title":"Parameters"},{"location":"semver-range-Range/#returns_3","text":"Range ref","title":"Returns"},{"location":"semver-range-Range/#overlaps","text":"[Source] fun box overlaps( that: Range ref) : Bool val","title":"overlaps"},{"location":"semver-range-Range/#parameters_4","text":"that: Range ref","title":"Parameters"},{"location":"semver-range-Range/#returns_4","text":"Bool val","title":"Returns"},{"location":"semver-range-Range/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"semver-range-Range/#returns_5","text":"String iso^","title":"Returns"},{"location":"semver-range-Range/#ne","text":"[Source] fun box ne( that: Range box) : Bool val","title":"ne"},{"location":"semver-range-Range/#parameters_5","text":"that: Range box","title":"Parameters"},{"location":"semver-range-Range/#returns_6","text":"Bool val","title":"Returns"},{"location":"semver-range-RangeBound/","text":"RangeBound \u00b6 [Source] type RangeBound is (Version ref | None val) Type Alias For \u00b6 ( Version ref | None val)","title":"RangeBound"},{"location":"semver-range-RangeBound/#rangebound","text":"[Source] type RangeBound is (Version ref | None val)","title":"RangeBound"},{"location":"semver-range-RangeBound/#type-alias-for","text":"( Version ref | None val)","title":"Type Alias For"},{"location":"semver-range-RangeBoundsAreEqual/","text":"RangeBoundsAreEqual \u00b6 [Source] primitive val RangeBoundsAreEqual Constructors \u00b6 create \u00b6 [Source] new val create() : RangeBoundsAreEqual val^ Returns \u00b6 RangeBoundsAreEqual val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( vrb1: (Version box | None box), vrb2: (Version box | None box)) : Bool val Parameters \u00b6 vrb1: ( Version box | None box) vrb2: ( Version box | None box) Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: RangeBoundsAreEqual val) : Bool val Parameters \u00b6 that: RangeBoundsAreEqual val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: RangeBoundsAreEqual val) : Bool val Parameters \u00b6 that: RangeBoundsAreEqual val Returns \u00b6 Bool val","title":"RangeBoundsAreEqual"},{"location":"semver-range-RangeBoundsAreEqual/#rangeboundsareequal","text":"[Source] primitive val RangeBoundsAreEqual","title":"RangeBoundsAreEqual"},{"location":"semver-range-RangeBoundsAreEqual/#constructors","text":"","title":"Constructors"},{"location":"semver-range-RangeBoundsAreEqual/#create","text":"[Source] new val create() : RangeBoundsAreEqual val^","title":"create"},{"location":"semver-range-RangeBoundsAreEqual/#returns","text":"RangeBoundsAreEqual val^","title":"Returns"},{"location":"semver-range-RangeBoundsAreEqual/#public-functions","text":"","title":"Public Functions"},{"location":"semver-range-RangeBoundsAreEqual/#apply","text":"[Source] fun box apply( vrb1: (Version box | None box), vrb2: (Version box | None box)) : Bool val","title":"apply"},{"location":"semver-range-RangeBoundsAreEqual/#parameters","text":"vrb1: ( Version box | None box) vrb2: ( Version box | None box)","title":"Parameters"},{"location":"semver-range-RangeBoundsAreEqual/#returns_1","text":"Bool val","title":"Returns"},{"location":"semver-range-RangeBoundsAreEqual/#eq","text":"[Source] fun box eq( that: RangeBoundsAreEqual val) : Bool val","title":"eq"},{"location":"semver-range-RangeBoundsAreEqual/#parameters_1","text":"that: RangeBoundsAreEqual val","title":"Parameters"},{"location":"semver-range-RangeBoundsAreEqual/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-range-RangeBoundsAreEqual/#ne","text":"[Source] fun box ne( that: RangeBoundsAreEqual val) : Bool val","title":"ne"},{"location":"semver-range-RangeBoundsAreEqual/#parameters_2","text":"that: RangeBoundsAreEqual val","title":"Parameters"},{"location":"semver-range-RangeBoundsAreEqual/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-solver--index/","text":"No package doc string provided for semver/solver. Public Types \u00b6 class Solver class Result class InMemArtifactSource class Constraint interface ArtifactSource class Artifact","title":"Semver solver  index"},{"location":"semver-solver--index/#public-types","text":"class Solver class Result class InMemArtifactSource class Constraint interface ArtifactSource class Artifact","title":"Public Types"},{"location":"semver-solver-Artifact/","text":"Artifact \u00b6 [Source] class ref Artifact is ComparableMixin[Artifact ref] ref, Hashable ref, Stringable box Implements \u00b6 ComparableMixin [ Artifact ref] ref Hashable ref Stringable box Constructors \u00b6 create \u00b6 [Source] new ref create( name': String val, version': Version ref, depends_on': Array[Constraint ref] ref = qualify) : Artifact ref^ Parameters \u00b6 name': String val version': Version ref depends_on': Array [ Constraint ref] ref = qualify Returns \u00b6 Artifact ref^ Public fields \u00b6 let name: String val \u00b6 [Source] let version: Version ref \u00b6 [Source] let depends_on: Array [ Constraint ref] ref \u00b6 [Source] Public Functions \u00b6 compare \u00b6 [Source] fun box compare( that: Artifact box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: Artifact box Returns \u00b6 ( Less val | Equal val | Greater val) hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ lt \u00b6 fun box lt( that: Artifact box) : Bool val Parameters \u00b6 that: Artifact box Returns \u00b6 Bool val le \u00b6 fun box le( that: Artifact box) : Bool val Parameters \u00b6 that: Artifact box Returns \u00b6 Bool val gt \u00b6 fun box gt( that: Artifact box) : Bool val Parameters \u00b6 that: Artifact box Returns \u00b6 Bool val ge \u00b6 fun box ge( that: Artifact box) : Bool val Parameters \u00b6 that: Artifact box Returns \u00b6 Bool val eq \u00b6 fun box eq( that: Artifact box) : Bool val Parameters \u00b6 that: Artifact box Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Artifact box) : Bool val Parameters \u00b6 that: Artifact box Returns \u00b6 Bool val","title":"Artifact"},{"location":"semver-solver-Artifact/#artifact","text":"[Source] class ref Artifact is ComparableMixin[Artifact ref] ref, Hashable ref, Stringable box","title":"Artifact"},{"location":"semver-solver-Artifact/#implements","text":"ComparableMixin [ Artifact ref] ref Hashable ref Stringable box","title":"Implements"},{"location":"semver-solver-Artifact/#constructors","text":"","title":"Constructors"},{"location":"semver-solver-Artifact/#create","text":"[Source] new ref create( name': String val, version': Version ref, depends_on': Array[Constraint ref] ref = qualify) : Artifact ref^","title":"create"},{"location":"semver-solver-Artifact/#parameters","text":"name': String val version': Version ref depends_on': Array [ Constraint ref] ref = qualify","title":"Parameters"},{"location":"semver-solver-Artifact/#returns","text":"Artifact ref^","title":"Returns"},{"location":"semver-solver-Artifact/#public-fields","text":"","title":"Public fields"},{"location":"semver-solver-Artifact/#let-name-string-val","text":"[Source]","title":"let name: String val"},{"location":"semver-solver-Artifact/#let-version-version-ref","text":"[Source]","title":"let version: Version ref"},{"location":"semver-solver-Artifact/#let-depends_on-arrayconstraint-ref-ref","text":"[Source]","title":"let depends_on: Array[Constraint ref] ref"},{"location":"semver-solver-Artifact/#public-functions","text":"","title":"Public Functions"},{"location":"semver-solver-Artifact/#compare","text":"[Source] fun box compare( that: Artifact box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"semver-solver-Artifact/#parameters_1","text":"that: Artifact box","title":"Parameters"},{"location":"semver-solver-Artifact/#returns_1","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"semver-solver-Artifact/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"semver-solver-Artifact/#returns_2","text":"USize val","title":"Returns"},{"location":"semver-solver-Artifact/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"semver-solver-Artifact/#returns_3","text":"String iso^","title":"Returns"},{"location":"semver-solver-Artifact/#lt","text":"fun box lt( that: Artifact box) : Bool val","title":"lt"},{"location":"semver-solver-Artifact/#parameters_2","text":"that: Artifact box","title":"Parameters"},{"location":"semver-solver-Artifact/#returns_4","text":"Bool val","title":"Returns"},{"location":"semver-solver-Artifact/#le","text":"fun box le( that: Artifact box) : Bool val","title":"le"},{"location":"semver-solver-Artifact/#parameters_3","text":"that: Artifact box","title":"Parameters"},{"location":"semver-solver-Artifact/#returns_5","text":"Bool val","title":"Returns"},{"location":"semver-solver-Artifact/#gt","text":"fun box gt( that: Artifact box) : Bool val","title":"gt"},{"location":"semver-solver-Artifact/#parameters_4","text":"that: Artifact box","title":"Parameters"},{"location":"semver-solver-Artifact/#returns_6","text":"Bool val","title":"Returns"},{"location":"semver-solver-Artifact/#ge","text":"fun box ge( that: Artifact box) : Bool val","title":"ge"},{"location":"semver-solver-Artifact/#parameters_5","text":"that: Artifact box","title":"Parameters"},{"location":"semver-solver-Artifact/#returns_7","text":"Bool val","title":"Returns"},{"location":"semver-solver-Artifact/#eq","text":"fun box eq( that: Artifact box) : Bool val","title":"eq"},{"location":"semver-solver-Artifact/#parameters_6","text":"that: Artifact box","title":"Parameters"},{"location":"semver-solver-Artifact/#returns_8","text":"Bool val","title":"Returns"},{"location":"semver-solver-Artifact/#ne","text":"fun box ne( that: Artifact box) : Bool val","title":"ne"},{"location":"semver-solver-Artifact/#parameters_7","text":"that: Artifact box","title":"Parameters"},{"location":"semver-solver-Artifact/#returns_9","text":"Bool val","title":"Returns"},{"location":"semver-solver-ArtifactSource/","text":"ArtifactSource \u00b6 [Source] interface ref ArtifactSource Public Functions \u00b6 all_versions_of \u00b6 [Source] fun ref all_versions_of( name: String val) : Iterator[Artifact ref] ref Parameters \u00b6 name: String val Returns \u00b6 Iterator [ Artifact ref] ref","title":"ArtifactSource"},{"location":"semver-solver-ArtifactSource/#artifactsource","text":"[Source] interface ref ArtifactSource","title":"ArtifactSource"},{"location":"semver-solver-ArtifactSource/#public-functions","text":"","title":"Public Functions"},{"location":"semver-solver-ArtifactSource/#all_versions_of","text":"[Source] fun ref all_versions_of( name: String val) : Iterator[Artifact ref] ref","title":"all_versions_of"},{"location":"semver-solver-ArtifactSource/#parameters","text":"name: String val","title":"Parameters"},{"location":"semver-solver-ArtifactSource/#returns","text":"Iterator [ Artifact ref] ref","title":"Returns"},{"location":"semver-solver-Constraint/","text":"Constraint \u00b6 [Source] class ref Constraint is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new ref create( artifact_name': String val, range': Range ref) : Constraint ref^ Parameters \u00b6 artifact_name': String val range': Range ref Returns \u00b6 Constraint ref^ Public fields \u00b6 let artifact_name: String val \u00b6 [Source] let range: Range ref \u00b6 [Source] Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^","title":"Constraint"},{"location":"semver-solver-Constraint/#constraint","text":"[Source] class ref Constraint is Stringable box","title":"Constraint"},{"location":"semver-solver-Constraint/#implements","text":"Stringable box","title":"Implements"},{"location":"semver-solver-Constraint/#constructors","text":"","title":"Constructors"},{"location":"semver-solver-Constraint/#create","text":"[Source] new ref create( artifact_name': String val, range': Range ref) : Constraint ref^","title":"create"},{"location":"semver-solver-Constraint/#parameters","text":"artifact_name': String val range': Range ref","title":"Parameters"},{"location":"semver-solver-Constraint/#returns","text":"Constraint ref^","title":"Returns"},{"location":"semver-solver-Constraint/#public-fields","text":"","title":"Public fields"},{"location":"semver-solver-Constraint/#let-artifact_name-string-val","text":"[Source]","title":"let artifact_name: String val"},{"location":"semver-solver-Constraint/#let-range-range-ref","text":"[Source]","title":"let range: Range ref"},{"location":"semver-solver-Constraint/#public-functions","text":"","title":"Public Functions"},{"location":"semver-solver-Constraint/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"semver-solver-Constraint/#returns_1","text":"String iso^","title":"Returns"},{"location":"semver-solver-InMemArtifactSource/","text":"InMemArtifactSource \u00b6 [Source] class ref InMemArtifactSource is ArtifactSource ref Implements \u00b6 ArtifactSource ref Constructors \u00b6 create \u00b6 [Source] new iso create() : InMemArtifactSource iso^ Returns \u00b6 InMemArtifactSource iso^ Public fields \u00b6 let artifact_sets_by_name: HashMap [ String val, HashSet [ Artifact ref, HashEq [ Artifact ref] val] ref, HashEq [ String val] val] ref \u00b6 [Source] Public Functions \u00b6 add \u00b6 [Source] fun ref add( a: Artifact ref) : None val Parameters \u00b6 a: Artifact ref Returns \u00b6 None val all_versions_of \u00b6 [Source] fun ref all_versions_of( name: String val) : Iterator[Artifact ref] ref Parameters \u00b6 name: String val Returns \u00b6 Iterator [ Artifact ref] ref","title":"InMemArtifactSource"},{"location":"semver-solver-InMemArtifactSource/#inmemartifactsource","text":"[Source] class ref InMemArtifactSource is ArtifactSource ref","title":"InMemArtifactSource"},{"location":"semver-solver-InMemArtifactSource/#implements","text":"ArtifactSource ref","title":"Implements"},{"location":"semver-solver-InMemArtifactSource/#constructors","text":"","title":"Constructors"},{"location":"semver-solver-InMemArtifactSource/#create","text":"[Source] new iso create() : InMemArtifactSource iso^","title":"create"},{"location":"semver-solver-InMemArtifactSource/#returns","text":"InMemArtifactSource iso^","title":"Returns"},{"location":"semver-solver-InMemArtifactSource/#public-fields","text":"","title":"Public fields"},{"location":"semver-solver-InMemArtifactSource/#let-artifact_sets_by_name-hashmapstring-val-hashsetartifact-ref-hasheqartifact-ref-val-ref-hasheqstring-val-val-ref","text":"[Source]","title":"let artifact_sets_by_name: HashMap[String val, HashSet[Artifact ref, HashEq[Artifact ref] val] ref, HashEq[String val] val] ref"},{"location":"semver-solver-InMemArtifactSource/#public-functions","text":"","title":"Public Functions"},{"location":"semver-solver-InMemArtifactSource/#add","text":"[Source] fun ref add( a: Artifact ref) : None val","title":"add"},{"location":"semver-solver-InMemArtifactSource/#parameters","text":"a: Artifact ref","title":"Parameters"},{"location":"semver-solver-InMemArtifactSource/#returns_1","text":"None val","title":"Returns"},{"location":"semver-solver-InMemArtifactSource/#all_versions_of","text":"[Source] fun ref all_versions_of( name: String val) : Iterator[Artifact ref] ref","title":"all_versions_of"},{"location":"semver-solver-InMemArtifactSource/#parameters_1","text":"name: String val","title":"Parameters"},{"location":"semver-solver-InMemArtifactSource/#returns_2","text":"Iterator [ Artifact ref] ref","title":"Returns"},{"location":"semver-solver-Result/","text":"Result \u00b6 [Source] class ref Result Constructors \u00b6 create \u00b6 [Source] new ref create( solution': Array[Artifact ref] ref = qualify, err': String val = \"\") : Result ref^ Parameters \u00b6 solution': Array [ Artifact ref] ref = qualify err': String val = \"\" Returns \u00b6 Result ref^ Public fields \u00b6 let solution: Array [ Artifact ref] ref \u00b6 [Source] let err: String val \u00b6 [Source] Public Functions \u00b6 is_err \u00b6 [Source] fun box is_err() : Bool val Returns \u00b6 Bool val","title":"Result"},{"location":"semver-solver-Result/#result","text":"[Source] class ref Result","title":"Result"},{"location":"semver-solver-Result/#constructors","text":"","title":"Constructors"},{"location":"semver-solver-Result/#create","text":"[Source] new ref create( solution': Array[Artifact ref] ref = qualify, err': String val = \"\") : Result ref^","title":"create"},{"location":"semver-solver-Result/#parameters","text":"solution': Array [ Artifact ref] ref = qualify err': String val = \"\"","title":"Parameters"},{"location":"semver-solver-Result/#returns","text":"Result ref^","title":"Returns"},{"location":"semver-solver-Result/#public-fields","text":"","title":"Public fields"},{"location":"semver-solver-Result/#let-solution-arrayartifact-ref-ref","text":"[Source]","title":"let solution: Array[Artifact ref] ref"},{"location":"semver-solver-Result/#let-err-string-val","text":"[Source]","title":"let err: String val"},{"location":"semver-solver-Result/#public-functions","text":"","title":"Public Functions"},{"location":"semver-solver-Result/#is_err","text":"[Source] fun box is_err() : Bool val","title":"is_err"},{"location":"semver-solver-Result/#returns_1","text":"Bool val","title":"Returns"},{"location":"semver-solver-Solver/","text":"Solver \u00b6 [Source] class ref Solver Constructors \u00b6 create \u00b6 [Source] new ref create( source': ArtifactSource ref) : Solver ref^ Parameters \u00b6 source': ArtifactSource ref Returns \u00b6 Solver ref^ Public fields \u00b6 let source: ArtifactSource ref \u00b6 [Source] Public Functions \u00b6 solve \u00b6 [Source] fun ref solve( constraints: Iterator[Constraint ref] ref) : Result ref Parameters \u00b6 constraints: Iterator [ Constraint ref] ref Returns \u00b6 Result ref","title":"Solver"},{"location":"semver-solver-Solver/#solver","text":"[Source] class ref Solver","title":"Solver"},{"location":"semver-solver-Solver/#constructors","text":"","title":"Constructors"},{"location":"semver-solver-Solver/#create","text":"[Source] new ref create( source': ArtifactSource ref) : Solver ref^","title":"create"},{"location":"semver-solver-Solver/#parameters","text":"source': ArtifactSource ref","title":"Parameters"},{"location":"semver-solver-Solver/#returns","text":"Solver ref^","title":"Returns"},{"location":"semver-solver-Solver/#public-fields","text":"","title":"Public fields"},{"location":"semver-solver-Solver/#let-source-artifactsource-ref","text":"[Source]","title":"let source: ArtifactSource ref"},{"location":"semver-solver-Solver/#public-functions","text":"","title":"Public Functions"},{"location":"semver-solver-Solver/#solve","text":"[Source] fun ref solve( constraints: Iterator[Constraint ref] ref) : Result ref","title":"solve"},{"location":"semver-solver-Solver/#parameters_1","text":"constraints: Iterator [ Constraint ref] ref","title":"Parameters"},{"location":"semver-solver-Solver/#returns_1","text":"Result ref","title":"Returns"},{"location":"semver-test-range--index/","text":"No package doc string provided for semver/test/range.","title":"Semver test range  index"},{"location":"semver-test-solver--index/","text":"No package doc string provided for semver/test/solver. Public Types \u00b6 class Scenario","title":"Semver test solver  index"},{"location":"semver-test-solver--index/#public-types","text":"class Scenario","title":"Public Types"},{"location":"semver-test-solver-Scenario/","text":"Scenario \u00b6 [Source] class ref Scenario Constructors \u00b6 create \u00b6 [Source] new ref create( name': String val) : Scenario ref^ Parameters \u00b6 name': String val Returns \u00b6 Scenario ref^ Public fields \u00b6 let name: String val \u00b6 [Source] let source: InMemArtifactSource ref \u00b6 [Source] let constraints: Array [ Constraint ref] ref \u00b6 [Source] let expectedSolution: Array [ Artifact ref] ref \u00b6 [Source] var expectedError: String val \u00b6 [Source] Public Functions \u00b6 run \u00b6 [Source] fun ref run( h: TestHelper val) : None val Parameters \u00b6 h: TestHelper val Returns \u00b6 None val","title":"Scenario"},{"location":"semver-test-solver-Scenario/#scenario","text":"[Source] class ref Scenario","title":"Scenario"},{"location":"semver-test-solver-Scenario/#constructors","text":"","title":"Constructors"},{"location":"semver-test-solver-Scenario/#create","text":"[Source] new ref create( name': String val) : Scenario ref^","title":"create"},{"location":"semver-test-solver-Scenario/#parameters","text":"name': String val","title":"Parameters"},{"location":"semver-test-solver-Scenario/#returns","text":"Scenario ref^","title":"Returns"},{"location":"semver-test-solver-Scenario/#public-fields","text":"","title":"Public fields"},{"location":"semver-test-solver-Scenario/#let-name-string-val","text":"[Source]","title":"let name: String val"},{"location":"semver-test-solver-Scenario/#let-source-inmemartifactsource-ref","text":"[Source]","title":"let source: InMemArtifactSource ref"},{"location":"semver-test-solver-Scenario/#let-constraints-arrayconstraint-ref-ref","text":"[Source]","title":"let constraints: Array[Constraint ref] ref"},{"location":"semver-test-solver-Scenario/#let-expectedsolution-arrayartifact-ref-ref","text":"[Source]","title":"let expectedSolution: Array[Artifact ref] ref"},{"location":"semver-test-solver-Scenario/#var-expectederror-string-val","text":"[Source]","title":"var expectedError: String val"},{"location":"semver-test-solver-Scenario/#public-functions","text":"","title":"Public Functions"},{"location":"semver-test-solver-Scenario/#run","text":"[Source] fun ref run( h: TestHelper val) : None val","title":"run"},{"location":"semver-test-solver-Scenario/#parameters_1","text":"h: TestHelper val","title":"Parameters"},{"location":"semver-test-solver-Scenario/#returns_1","text":"None val","title":"Returns"},{"location":"semver-test-utils--index/","text":"No package doc string provided for semver/test/utils. Public Types \u00b6 class AlwaysComparesAs","title":"Semver test utils  index"},{"location":"semver-test-utils--index/#public-types","text":"class AlwaysComparesAs","title":"Public Types"},{"location":"semver-test-utils-AlwaysComparesAs/","text":"AlwaysComparesAs \u00b6 [Source] class ref AlwaysComparesAs is ComparableMixin[AlwaysComparesAs ref] ref Implements \u00b6 ComparableMixin [ AlwaysComparesAs ref] ref Constructors \u00b6 create \u00b6 [Source] new ref create( value': (Less val | Equal val | Greater val)) : AlwaysComparesAs ref^ Parameters \u00b6 value': ( Less val | Equal val | Greater val) Returns \u00b6 AlwaysComparesAs ref^ Public fields \u00b6 let value: ( Less val | Equal val | Greater val) \u00b6 [Source] Public Functions \u00b6 compare \u00b6 [Source] fun box compare( that: AlwaysComparesAs box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: AlwaysComparesAs box Returns \u00b6 ( Less val | Equal val | Greater val) lt \u00b6 fun box lt( that: AlwaysComparesAs box) : Bool val Parameters \u00b6 that: AlwaysComparesAs box Returns \u00b6 Bool val le \u00b6 fun box le( that: AlwaysComparesAs box) : Bool val Parameters \u00b6 that: AlwaysComparesAs box Returns \u00b6 Bool val gt \u00b6 fun box gt( that: AlwaysComparesAs box) : Bool val Parameters \u00b6 that: AlwaysComparesAs box Returns \u00b6 Bool val ge \u00b6 fun box ge( that: AlwaysComparesAs box) : Bool val Parameters \u00b6 that: AlwaysComparesAs box Returns \u00b6 Bool val eq \u00b6 fun box eq( that: AlwaysComparesAs box) : Bool val Parameters \u00b6 that: AlwaysComparesAs box Returns \u00b6 Bool val ne \u00b6 fun box ne( that: AlwaysComparesAs box) : Bool val Parameters \u00b6 that: AlwaysComparesAs box Returns \u00b6 Bool val","title":"AlwaysComparesAs"},{"location":"semver-test-utils-AlwaysComparesAs/#alwayscomparesas","text":"[Source] class ref AlwaysComparesAs is ComparableMixin[AlwaysComparesAs ref] ref","title":"AlwaysComparesAs"},{"location":"semver-test-utils-AlwaysComparesAs/#implements","text":"ComparableMixin [ AlwaysComparesAs ref] ref","title":"Implements"},{"location":"semver-test-utils-AlwaysComparesAs/#constructors","text":"","title":"Constructors"},{"location":"semver-test-utils-AlwaysComparesAs/#create","text":"[Source] new ref create( value': (Less val | Equal val | Greater val)) : AlwaysComparesAs ref^","title":"create"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters","text":"value': ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns","text":"AlwaysComparesAs ref^","title":"Returns"},{"location":"semver-test-utils-AlwaysComparesAs/#public-fields","text":"","title":"Public fields"},{"location":"semver-test-utils-AlwaysComparesAs/#let-value-less-val-equal-val-greater-val","text":"[Source]","title":"let value: (Less val | Equal val | Greater val)"},{"location":"semver-test-utils-AlwaysComparesAs/#public-functions","text":"","title":"Public Functions"},{"location":"semver-test-utils-AlwaysComparesAs/#compare","text":"[Source] fun box compare( that: AlwaysComparesAs box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters_1","text":"that: AlwaysComparesAs box","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns_1","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"semver-test-utils-AlwaysComparesAs/#lt","text":"fun box lt( that: AlwaysComparesAs box) : Bool val","title":"lt"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters_2","text":"that: AlwaysComparesAs box","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-test-utils-AlwaysComparesAs/#le","text":"fun box le( that: AlwaysComparesAs box) : Bool val","title":"le"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters_3","text":"that: AlwaysComparesAs box","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-test-utils-AlwaysComparesAs/#gt","text":"fun box gt( that: AlwaysComparesAs box) : Bool val","title":"gt"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters_4","text":"that: AlwaysComparesAs box","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns_4","text":"Bool val","title":"Returns"},{"location":"semver-test-utils-AlwaysComparesAs/#ge","text":"fun box ge( that: AlwaysComparesAs box) : Bool val","title":"ge"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters_5","text":"that: AlwaysComparesAs box","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns_5","text":"Bool val","title":"Returns"},{"location":"semver-test-utils-AlwaysComparesAs/#eq","text":"fun box eq( that: AlwaysComparesAs box) : Bool val","title":"eq"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters_6","text":"that: AlwaysComparesAs box","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns_6","text":"Bool val","title":"Returns"},{"location":"semver-test-utils-AlwaysComparesAs/#ne","text":"fun box ne( that: AlwaysComparesAs box) : Bool val","title":"ne"},{"location":"semver-test-utils-AlwaysComparesAs/#parameters_7","text":"that: AlwaysComparesAs box","title":"Parameters"},{"location":"semver-test-utils-AlwaysComparesAs/#returns_7","text":"Bool val","title":"Returns"},{"location":"semver-test-version--index/","text":"No package doc string provided for semver/test/version.","title":"Semver test version  index"},{"location":"semver-utils--index/","text":"No package doc string provided for semver/utils. Public Types \u00b6 primitive Strings class EmptyIterator class ZipIterator interface ComparableMixin","title":"Semver utils  index"},{"location":"semver-utils--index/#public-types","text":"primitive Strings class EmptyIterator class ZipIterator interface ComparableMixin","title":"Public Types"},{"location":"semver-utils-ComparableMixin/","text":"ComparableMixin[A: Comparable [A] #read] \u00b6 [Source] interface ref ComparableMixin[A: Comparable[A] #read] is Comparable[A] ref Implements \u00b6 Comparable [A] ref Public Functions \u00b6 compare \u00b6 [Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) lt \u00b6 [Source] fun box lt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"ComparableMixin\\[A: [Comparable](https://stdlib.ponylang.io/builtin-Comparable/)\\[A\\] #read\\]"},{"location":"semver-utils-ComparableMixin/#comparablemixina-comparablea-read","text":"[Source] interface ref ComparableMixin[A: Comparable[A] #read] is Comparable[A] ref","title":"ComparableMixin[A: Comparable[A] #read]"},{"location":"semver-utils-ComparableMixin/#implements","text":"Comparable [A] ref","title":"Implements"},{"location":"semver-utils-ComparableMixin/#public-functions","text":"","title":"Public Functions"},{"location":"semver-utils-ComparableMixin/#compare","text":"[Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"semver-utils-ComparableMixin/#parameters","text":"that: box->A","title":"Parameters"},{"location":"semver-utils-ComparableMixin/#returns","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"semver-utils-ComparableMixin/#lt","text":"[Source] fun box lt( that: box->A) : Bool val","title":"lt"},{"location":"semver-utils-ComparableMixin/#parameters_1","text":"that: box->A","title":"Parameters"},{"location":"semver-utils-ComparableMixin/#returns_1","text":"Bool val","title":"Returns"},{"location":"semver-utils-ComparableMixin/#le","text":"[Source] fun box le( that: box->A) : Bool val","title":"le"},{"location":"semver-utils-ComparableMixin/#parameters_2","text":"that: box->A","title":"Parameters"},{"location":"semver-utils-ComparableMixin/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-utils-ComparableMixin/#gt","text":"[Source] fun box gt( that: box->A) : Bool val","title":"gt"},{"location":"semver-utils-ComparableMixin/#parameters_3","text":"that: box->A","title":"Parameters"},{"location":"semver-utils-ComparableMixin/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-utils-ComparableMixin/#ge","text":"[Source] fun box ge( that: box->A) : Bool val","title":"ge"},{"location":"semver-utils-ComparableMixin/#parameters_4","text":"that: box->A","title":"Parameters"},{"location":"semver-utils-ComparableMixin/#returns_4","text":"Bool val","title":"Returns"},{"location":"semver-utils-ComparableMixin/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"semver-utils-ComparableMixin/#parameters_5","text":"that: box->A","title":"Parameters"},{"location":"semver-utils-ComparableMixin/#returns_5","text":"Bool val","title":"Returns"},{"location":"semver-utils-ComparableMixin/#ne","text":"[Source] fun box ne( that: box->A) : Bool val","title":"ne"},{"location":"semver-utils-ComparableMixin/#parameters_6","text":"that: box->A","title":"Parameters"},{"location":"semver-utils-ComparableMixin/#returns_6","text":"Bool val","title":"Returns"},{"location":"semver-utils-EmptyIterator/","text":"EmptyIterator[A: A] \u00b6 [Source] class ref EmptyIterator[A: A] is Iterator[A] ref Implements \u00b6 Iterator [A] ref Constructors \u00b6 create \u00b6 [Source] new iso create() : EmptyIterator[A] iso^ Returns \u00b6 EmptyIterator [A] iso^ Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A ? Returns \u00b6 A ?","title":"EmptyIterator\\[A: A\\]"},{"location":"semver-utils-EmptyIterator/#emptyiteratora-a","text":"[Source] class ref EmptyIterator[A: A] is Iterator[A] ref","title":"EmptyIterator[A: A]"},{"location":"semver-utils-EmptyIterator/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"semver-utils-EmptyIterator/#constructors","text":"","title":"Constructors"},{"location":"semver-utils-EmptyIterator/#create","text":"[Source] new iso create() : EmptyIterator[A] iso^","title":"create"},{"location":"semver-utils-EmptyIterator/#returns","text":"EmptyIterator [A] iso^","title":"Returns"},{"location":"semver-utils-EmptyIterator/#public-functions","text":"","title":"Public Functions"},{"location":"semver-utils-EmptyIterator/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"semver-utils-EmptyIterator/#returns_1","text":"Bool val","title":"Returns"},{"location":"semver-utils-EmptyIterator/#next","text":"[Source] fun ref next() : A ?","title":"next"},{"location":"semver-utils-EmptyIterator/#returns_2","text":"A ?","title":"Returns"},{"location":"semver-utils-Strings/","text":"Strings \u00b6 [Source] primitive val Strings Constructors \u00b6 create \u00b6 [Source] new val create() : Strings val^ Returns \u00b6 Strings val^ Public Functions \u00b6 contains_only \u00b6 [Source] fun box contains_only( s: String val, bytes: HashSet[U8 val, HashEq[U8 val] val] ref) : Bool val Parameters \u00b6 s: String val bytes: HashSet [ U8 val, HashEq [ U8 val] val] ref Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Strings val) : Bool val Parameters \u00b6 that: Strings val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Strings val) : Bool val Parameters \u00b6 that: Strings val Returns \u00b6 Bool val","title":"Strings"},{"location":"semver-utils-Strings/#strings","text":"[Source] primitive val Strings","title":"Strings"},{"location":"semver-utils-Strings/#constructors","text":"","title":"Constructors"},{"location":"semver-utils-Strings/#create","text":"[Source] new val create() : Strings val^","title":"create"},{"location":"semver-utils-Strings/#returns","text":"Strings val^","title":"Returns"},{"location":"semver-utils-Strings/#public-functions","text":"","title":"Public Functions"},{"location":"semver-utils-Strings/#contains_only","text":"[Source] fun box contains_only( s: String val, bytes: HashSet[U8 val, HashEq[U8 val] val] ref) : Bool val","title":"contains_only"},{"location":"semver-utils-Strings/#parameters","text":"s: String val bytes: HashSet [ U8 val, HashEq [ U8 val] val] ref","title":"Parameters"},{"location":"semver-utils-Strings/#returns_1","text":"Bool val","title":"Returns"},{"location":"semver-utils-Strings/#eq","text":"[Source] fun box eq( that: Strings val) : Bool val","title":"eq"},{"location":"semver-utils-Strings/#parameters_1","text":"that: Strings val","title":"Parameters"},{"location":"semver-utils-Strings/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-utils-Strings/#ne","text":"[Source] fun box ne( that: Strings val) : Bool val","title":"ne"},{"location":"semver-utils-Strings/#parameters_2","text":"that: Strings val","title":"Parameters"},{"location":"semver-utils-Strings/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-utils-ZipIterator/","text":"ZipIterator[A: A, B: B] \u00b6 [Source] class ref ZipIterator[A: A, B: B] is Iterator[(A , B)] ref Implements \u00b6 Iterator [(A , B)] ref Constructors \u00b6 create \u00b6 [Source] new ref create( ia': Iterator[A] ref, ib': Iterator[B] ref) : ZipIterator[A, B] ref^ Parameters \u00b6 ia': Iterator [A] ref ib': Iterator [B] ref Returns \u00b6 ZipIterator [A, B] ref^ Public fields \u00b6 let ia: Iterator [A] ref \u00b6 [Source] let ib: Iterator [B] ref \u00b6 [Source] Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : (A , B) ? Returns \u00b6 (A , B) ?","title":"ZipIterator\\[A: A, B: B\\]"},{"location":"semver-utils-ZipIterator/#zipiteratora-a-b-b","text":"[Source] class ref ZipIterator[A: A, B: B] is Iterator[(A , B)] ref","title":"ZipIterator[A: A, B: B]"},{"location":"semver-utils-ZipIterator/#implements","text":"Iterator [(A , B)] ref","title":"Implements"},{"location":"semver-utils-ZipIterator/#constructors","text":"","title":"Constructors"},{"location":"semver-utils-ZipIterator/#create","text":"[Source] new ref create( ia': Iterator[A] ref, ib': Iterator[B] ref) : ZipIterator[A, B] ref^","title":"create"},{"location":"semver-utils-ZipIterator/#parameters","text":"ia': Iterator [A] ref ib': Iterator [B] ref","title":"Parameters"},{"location":"semver-utils-ZipIterator/#returns","text":"ZipIterator [A, B] ref^","title":"Returns"},{"location":"semver-utils-ZipIterator/#public-fields","text":"","title":"Public fields"},{"location":"semver-utils-ZipIterator/#let-ia-iteratora-ref","text":"[Source]","title":"let ia: Iterator[A] ref"},{"location":"semver-utils-ZipIterator/#let-ib-iteratorb-ref","text":"[Source]","title":"let ib: Iterator[B] ref"},{"location":"semver-utils-ZipIterator/#public-functions","text":"","title":"Public Functions"},{"location":"semver-utils-ZipIterator/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"semver-utils-ZipIterator/#returns_1","text":"Bool val","title":"Returns"},{"location":"semver-utils-ZipIterator/#next","text":"[Source] fun ref next() : (A , B) ?","title":"next"},{"location":"semver-utils-ZipIterator/#returns_2","text":"(A , B) ?","title":"Returns"},{"location":"semver-version--index/","text":"No package doc string provided for semver/version. Public Types \u00b6 class Version primitive ValidateFields type PreReleaseField primitive ParseVersion primitive Consts primitive CompareVersions","title":"Semver version  index"},{"location":"semver-version--index/#public-types","text":"class Version primitive ValidateFields type PreReleaseField primitive ParseVersion primitive Consts primitive CompareVersions","title":"Public Types"},{"location":"semver-version-CompareVersions/","text":"CompareVersions \u00b6 [Source] primitive val CompareVersions Constructors \u00b6 create \u00b6 [Source] new val create() : CompareVersions val^ Returns \u00b6 CompareVersions val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( v1: Version box, v2: Version box) : (Less val | Equal val | Greater val) Parameters \u00b6 v1: Version box v2: Version box Returns \u00b6 ( Less val | Equal val | Greater val) eq \u00b6 [Source] fun box eq( that: CompareVersions val) : Bool val Parameters \u00b6 that: CompareVersions val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CompareVersions val) : Bool val Parameters \u00b6 that: CompareVersions val Returns \u00b6 Bool val","title":"CompareVersions"},{"location":"semver-version-CompareVersions/#compareversions","text":"[Source] primitive val CompareVersions","title":"CompareVersions"},{"location":"semver-version-CompareVersions/#constructors","text":"","title":"Constructors"},{"location":"semver-version-CompareVersions/#create","text":"[Source] new val create() : CompareVersions val^","title":"create"},{"location":"semver-version-CompareVersions/#returns","text":"CompareVersions val^","title":"Returns"},{"location":"semver-version-CompareVersions/#public-functions","text":"","title":"Public Functions"},{"location":"semver-version-CompareVersions/#apply","text":"[Source] fun box apply( v1: Version box, v2: Version box) : (Less val | Equal val | Greater val)","title":"apply"},{"location":"semver-version-CompareVersions/#parameters","text":"v1: Version box v2: Version box","title":"Parameters"},{"location":"semver-version-CompareVersions/#returns_1","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"semver-version-CompareVersions/#eq","text":"[Source] fun box eq( that: CompareVersions val) : Bool val","title":"eq"},{"location":"semver-version-CompareVersions/#parameters_1","text":"that: CompareVersions val","title":"Parameters"},{"location":"semver-version-CompareVersions/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-version-CompareVersions/#ne","text":"[Source] fun box ne( that: CompareVersions val) : Bool val","title":"ne"},{"location":"semver-version-CompareVersions/#parameters_2","text":"that: CompareVersions val","title":"Parameters"},{"location":"semver-version-CompareVersions/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-version-Consts/","text":"Consts \u00b6 [Source] primitive val Consts Constructors \u00b6 create \u00b6 [Source] new val create() : Consts val^ Returns \u00b6 Consts val^ Public Functions \u00b6 alphas \u00b6 [Source] fun box alphas() : HashSet[U8 val, HashEq[U8 val] val] ref Returns \u00b6 HashSet [ U8 val, HashEq [ U8 val] val] ref nums \u00b6 [Source] fun box nums() : HashSet[U8 val, HashEq[U8 val] val] ref Returns \u00b6 HashSet [ U8 val, HashEq [ U8 val] val] ref alphanums \u00b6 [Source] fun box alphanums() : HashSet[U8 val, HashEq[U8 val] val] ref Returns \u00b6 HashSet [ U8 val, HashEq [ U8 val] val] ref eq \u00b6 [Source] fun box eq( that: Consts val) : Bool val Parameters \u00b6 that: Consts val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Consts val) : Bool val Parameters \u00b6 that: Consts val Returns \u00b6 Bool val","title":"Consts"},{"location":"semver-version-Consts/#consts","text":"[Source] primitive val Consts","title":"Consts"},{"location":"semver-version-Consts/#constructors","text":"","title":"Constructors"},{"location":"semver-version-Consts/#create","text":"[Source] new val create() : Consts val^","title":"create"},{"location":"semver-version-Consts/#returns","text":"Consts val^","title":"Returns"},{"location":"semver-version-Consts/#public-functions","text":"","title":"Public Functions"},{"location":"semver-version-Consts/#alphas","text":"[Source] fun box alphas() : HashSet[U8 val, HashEq[U8 val] val] ref","title":"alphas"},{"location":"semver-version-Consts/#returns_1","text":"HashSet [ U8 val, HashEq [ U8 val] val] ref","title":"Returns"},{"location":"semver-version-Consts/#nums","text":"[Source] fun box nums() : HashSet[U8 val, HashEq[U8 val] val] ref","title":"nums"},{"location":"semver-version-Consts/#returns_2","text":"HashSet [ U8 val, HashEq [ U8 val] val] ref","title":"Returns"},{"location":"semver-version-Consts/#alphanums","text":"[Source] fun box alphanums() : HashSet[U8 val, HashEq[U8 val] val] ref","title":"alphanums"},{"location":"semver-version-Consts/#returns_3","text":"HashSet [ U8 val, HashEq [ U8 val] val] ref","title":"Returns"},{"location":"semver-version-Consts/#eq","text":"[Source] fun box eq( that: Consts val) : Bool val","title":"eq"},{"location":"semver-version-Consts/#parameters","text":"that: Consts val","title":"Parameters"},{"location":"semver-version-Consts/#returns_4","text":"Bool val","title":"Returns"},{"location":"semver-version-Consts/#ne","text":"[Source] fun box ne( that: Consts val) : Bool val","title":"ne"},{"location":"semver-version-Consts/#parameters_1","text":"that: Consts val","title":"Parameters"},{"location":"semver-version-Consts/#returns_5","text":"Bool val","title":"Returns"},{"location":"semver-version-ParseVersion/","text":"ParseVersion \u00b6 [Source] primitive val ParseVersion Constructors \u00b6 create \u00b6 [Source] new val create() : ParseVersion val^ Returns \u00b6 ParseVersion val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( s: String val) : Version ref Parameters \u00b6 s: String val Returns \u00b6 Version ref eq \u00b6 [Source] fun box eq( that: ParseVersion val) : Bool val Parameters \u00b6 that: ParseVersion val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ParseVersion val) : Bool val Parameters \u00b6 that: ParseVersion val Returns \u00b6 Bool val","title":"ParseVersion"},{"location":"semver-version-ParseVersion/#parseversion","text":"[Source] primitive val ParseVersion","title":"ParseVersion"},{"location":"semver-version-ParseVersion/#constructors","text":"","title":"Constructors"},{"location":"semver-version-ParseVersion/#create","text":"[Source] new val create() : ParseVersion val^","title":"create"},{"location":"semver-version-ParseVersion/#returns","text":"ParseVersion val^","title":"Returns"},{"location":"semver-version-ParseVersion/#public-functions","text":"","title":"Public Functions"},{"location":"semver-version-ParseVersion/#apply","text":"[Source] fun box apply( s: String val) : Version ref","title":"apply"},{"location":"semver-version-ParseVersion/#parameters","text":"s: String val","title":"Parameters"},{"location":"semver-version-ParseVersion/#returns_1","text":"Version ref","title":"Returns"},{"location":"semver-version-ParseVersion/#eq","text":"[Source] fun box eq( that: ParseVersion val) : Bool val","title":"eq"},{"location":"semver-version-ParseVersion/#parameters_1","text":"that: ParseVersion val","title":"Parameters"},{"location":"semver-version-ParseVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-version-ParseVersion/#ne","text":"[Source] fun box ne( that: ParseVersion val) : Bool val","title":"ne"},{"location":"semver-version-ParseVersion/#parameters_2","text":"that: ParseVersion val","title":"Parameters"},{"location":"semver-version-ParseVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-version-PreReleaseField/","text":"PreReleaseField \u00b6 [Source] type PreReleaseField is (String val | U64 val) Type Alias For \u00b6 ( String val | U64 val)","title":"PreReleaseField"},{"location":"semver-version-PreReleaseField/#prereleasefield","text":"[Source] type PreReleaseField is (String val | U64 val)","title":"PreReleaseField"},{"location":"semver-version-PreReleaseField/#type-alias-for","text":"( String val | U64 val)","title":"Type Alias For"},{"location":"semver-version-ValidateFields/","text":"ValidateFields \u00b6 [Source] primitive val ValidateFields Constructors \u00b6 create \u00b6 [Source] new val create() : ValidateFields val^ Returns \u00b6 ValidateFields val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( pr: Array[(String val | U64 val)] ref, build: Array[String val] ref) : Array[String val] ref Parameters \u00b6 pr: Array [( String val | U64 val)] ref build: Array [ String val] ref Returns \u00b6 Array [ String val] ref eq \u00b6 [Source] fun box eq( that: ValidateFields val) : Bool val Parameters \u00b6 that: ValidateFields val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ValidateFields val) : Bool val Parameters \u00b6 that: ValidateFields val Returns \u00b6 Bool val","title":"ValidateFields"},{"location":"semver-version-ValidateFields/#validatefields","text":"[Source] primitive val ValidateFields","title":"ValidateFields"},{"location":"semver-version-ValidateFields/#constructors","text":"","title":"Constructors"},{"location":"semver-version-ValidateFields/#create","text":"[Source] new val create() : ValidateFields val^","title":"create"},{"location":"semver-version-ValidateFields/#returns","text":"ValidateFields val^","title":"Returns"},{"location":"semver-version-ValidateFields/#public-functions","text":"","title":"Public Functions"},{"location":"semver-version-ValidateFields/#apply","text":"[Source] fun box apply( pr: Array[(String val | U64 val)] ref, build: Array[String val] ref) : Array[String val] ref","title":"apply"},{"location":"semver-version-ValidateFields/#parameters","text":"pr: Array [( String val | U64 val)] ref build: Array [ String val] ref","title":"Parameters"},{"location":"semver-version-ValidateFields/#returns_1","text":"Array [ String val] ref","title":"Returns"},{"location":"semver-version-ValidateFields/#eq","text":"[Source] fun box eq( that: ValidateFields val) : Bool val","title":"eq"},{"location":"semver-version-ValidateFields/#parameters_1","text":"that: ValidateFields val","title":"Parameters"},{"location":"semver-version-ValidateFields/#returns_2","text":"Bool val","title":"Returns"},{"location":"semver-version-ValidateFields/#ne","text":"[Source] fun box ne( that: ValidateFields val) : Bool val","title":"ne"},{"location":"semver-version-ValidateFields/#parameters_2","text":"that: ValidateFields val","title":"Parameters"},{"location":"semver-version-ValidateFields/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-version-Version/","text":"Version \u00b6 [Source] class ref Version is ComparableMixin[Version ref] ref, Hashable ref, Stringable box Implements \u00b6 ComparableMixin [ Version ref] ref Hashable ref Stringable box Constructors \u00b6 create \u00b6 [Source] new ref create( major': U64 val, minor': U64 val = 0, patch': U64 val = 0, pr_fields': Array[(String val | U64 val)] ref = qualify, build_fields': Array[String val] ref = qualify) : Version ref^ Parameters \u00b6 major': U64 val minor': U64 val = 0 patch': U64 val = 0 pr_fields': Array [( String val | U64 val)] ref = qualify build_fields': Array [ String val] ref = qualify Returns \u00b6 Version ref^ Public fields \u00b6 var major: U64 val \u00b6 [Source] var minor: U64 val \u00b6 [Source] var patch: U64 val \u00b6 [Source] let pr_fields: Array [( String val | U64 val)] ref \u00b6 [Source] let build_fields: Array [ String val] ref \u00b6 [Source] let errors: Array [ String val] ref \u00b6 [Source] Public Functions \u00b6 compare \u00b6 [Source] fun box compare( that: Version box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: Version box Returns \u00b6 ( Less val | Equal val | Greater val) hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val is_valid \u00b6 [Source] fun box is_valid() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ major_minor_patch_string \u00b6 [Source] fun box major_minor_patch_string() : String val Returns \u00b6 String val pre_release_string \u00b6 [Source] fun box pre_release_string() : String val Returns \u00b6 String val build_string \u00b6 [Source] fun box build_string() : String val Returns \u00b6 String val lt \u00b6 [Source] fun box lt( that: Version box) : Bool val Parameters \u00b6 that: Version box Returns \u00b6 Bool val le \u00b6 [Source] fun box le( that: Version box) : Bool val Parameters \u00b6 that: Version box Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( that: Version box) : Bool val Parameters \u00b6 that: Version box Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( that: Version box) : Bool val Parameters \u00b6 that: Version box Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Version box) : Bool val Parameters \u00b6 that: Version box Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Version box) : Bool val Parameters \u00b6 that: Version box Returns \u00b6 Bool val","title":"Version"},{"location":"semver-version-Version/#version","text":"[Source] class ref Version is ComparableMixin[Version ref] ref, Hashable ref, Stringable box","title":"Version"},{"location":"semver-version-Version/#implements","text":"ComparableMixin [ Version ref] ref Hashable ref Stringable box","title":"Implements"},{"location":"semver-version-Version/#constructors","text":"","title":"Constructors"},{"location":"semver-version-Version/#create","text":"[Source] new ref create( major': U64 val, minor': U64 val = 0, patch': U64 val = 0, pr_fields': Array[(String val | U64 val)] ref = qualify, build_fields': Array[String val] ref = qualify) : Version ref^","title":"create"},{"location":"semver-version-Version/#parameters","text":"major': U64 val minor': U64 val = 0 patch': U64 val = 0 pr_fields': Array [( String val | U64 val)] ref = qualify build_fields': Array [ String val] ref = qualify","title":"Parameters"},{"location":"semver-version-Version/#returns","text":"Version ref^","title":"Returns"},{"location":"semver-version-Version/#public-fields","text":"","title":"Public fields"},{"location":"semver-version-Version/#var-major-u64-val","text":"[Source]","title":"var major: U64 val"},{"location":"semver-version-Version/#var-minor-u64-val","text":"[Source]","title":"var minor: U64 val"},{"location":"semver-version-Version/#var-patch-u64-val","text":"[Source]","title":"var patch: U64 val"},{"location":"semver-version-Version/#let-pr_fields-arraystring-val-u64-val-ref","text":"[Source]","title":"let pr_fields: Array[(String val | U64 val)] ref"},{"location":"semver-version-Version/#let-build_fields-arraystring-val-ref","text":"[Source]","title":"let build_fields: Array[String val] ref"},{"location":"semver-version-Version/#let-errors-arraystring-val-ref","text":"[Source]","title":"let errors: Array[String val] ref"},{"location":"semver-version-Version/#public-functions","text":"","title":"Public Functions"},{"location":"semver-version-Version/#compare","text":"[Source] fun box compare( that: Version box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"semver-version-Version/#parameters_1","text":"that: Version box","title":"Parameters"},{"location":"semver-version-Version/#returns_1","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"semver-version-Version/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"semver-version-Version/#returns_2","text":"USize val","title":"Returns"},{"location":"semver-version-Version/#is_valid","text":"[Source] fun box is_valid() : Bool val","title":"is_valid"},{"location":"semver-version-Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"semver-version-Version/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"semver-version-Version/#returns_4","text":"String iso^","title":"Returns"},{"location":"semver-version-Version/#major_minor_patch_string","text":"[Source] fun box major_minor_patch_string() : String val","title":"major_minor_patch_string"},{"location":"semver-version-Version/#returns_5","text":"String val","title":"Returns"},{"location":"semver-version-Version/#pre_release_string","text":"[Source] fun box pre_release_string() : String val","title":"pre_release_string"},{"location":"semver-version-Version/#returns_6","text":"String val","title":"Returns"},{"location":"semver-version-Version/#build_string","text":"[Source] fun box build_string() : String val","title":"build_string"},{"location":"semver-version-Version/#returns_7","text":"String val","title":"Returns"},{"location":"semver-version-Version/#lt","text":"[Source] fun box lt( that: Version box) : Bool val","title":"lt"},{"location":"semver-version-Version/#parameters_2","text":"that: Version box","title":"Parameters"},{"location":"semver-version-Version/#returns_8","text":"Bool val","title":"Returns"},{"location":"semver-version-Version/#le","text":"[Source] fun box le( that: Version box) : Bool val","title":"le"},{"location":"semver-version-Version/#parameters_3","text":"that: Version box","title":"Parameters"},{"location":"semver-version-Version/#returns_9","text":"Bool val","title":"Returns"},{"location":"semver-version-Version/#gt","text":"[Source] fun box gt( that: Version box) : Bool val","title":"gt"},{"location":"semver-version-Version/#parameters_4","text":"that: Version box","title":"Parameters"},{"location":"semver-version-Version/#returns_10","text":"Bool val","title":"Returns"},{"location":"semver-version-Version/#ge","text":"[Source] fun box ge( that: Version box) : Bool val","title":"ge"},{"location":"semver-version-Version/#parameters_5","text":"that: Version box","title":"Parameters"},{"location":"semver-version-Version/#returns_11","text":"Bool val","title":"Returns"},{"location":"semver-version-Version/#eq","text":"[Source] fun box eq( that: Version box) : Bool val","title":"eq"},{"location":"semver-version-Version/#parameters_6","text":"that: Version box","title":"Parameters"},{"location":"semver-version-Version/#returns_12","text":"Bool val","title":"Returns"},{"location":"semver-version-Version/#ne","text":"[Source] fun box ne( that: Version box) : Bool val","title":"ne"},{"location":"semver-version-Version/#parameters_7","text":"that: Version box","title":"Parameters"},{"location":"semver-version-Version/#returns_13","text":"Bool val","title":"Returns"}]}